$genfilesProperties = "#Generated by Javscode v0.1-beta
nbproject/build-impl.xml.script.CRC32=
nbproject/build-impl.xml.stylesheet.CRC32=
nbproject/build-impl.xml.data.CRC32="

function projectPorperties() {
    param(
        [string]
        $projectName
    )
    Set-Content -Path "$nbproject/project.properties" -Value "#Generated by Javscode v0.1-beta
excludes=
run.classpath=`${build.classes.dir}
javac.test.classpath=`${build.classes.dir}
javac.processorpath=`${javac.classpath}
dist.javadoc.dir=`${dist.dir}/javadoc
run.modulepath=`${javac.modulepath}
annotation.processing.enabled=true
build.sysclasspath=ignore
debug.modulepath=`${run.modulepath}
javac.compilerargs=
javadoc.noindex=false
javadoc.private=false
javadoc.author=false
src.src.dir=src
source.encoding=UTF-8
javac.source=1.8
javadoc.use=true
includes=**
jar.compress=false
javadoc.nonavbar=false
annotation.processing.enabled.in.editor=false
javadoc.notree=false
annotation.processing.processors.list=
javac.deprecation=false
jlink.launcher=true
javadoc.additionalparam=
jlink.launcher.name=$projectName
build.generated.sources.dir=`${build.dir}/generated-sources
javadoc.splitindex=true
javac.processormodulepath=
run.jvmargs=
jlink.additionalmodules=
javadoc.encoding=`${source.encoding}
javac.classpath=
mkdist.disabled=false
run.test.modulepath=`${javac.test.modulepath}
build.classes.excludes=**/*.java,**/*.form
dist.jlink.dir=`${dist.dir}/jlink
dist.jar=`${dist.dir}/$projectName.jar
build.classes.dir=`${build.dir}/classes
debug.test.modulepath=`${run.test.modulepath}
build.test.classes.dir=`${build.dir}/test/classes
javadoc.windowtitle=
build.test.results.dir=`${build.dir}/test/results
annotation.processing.processor.options=
dist.dir=dist
build.dir=build
dist.archive.excludes=
annotation.processing.source.output=`${build.generated.sources.dir}/ap-source-output
build.generated.dir=`${build.dir}/generated
javadoc.version=false
javac.test.modulepath=`${javac.modulepath}
debug.test.classpath=`${run.test.classpath}
javac.external.vm=true
javac.target=1.8
platform.active=default_platform
manifest.file=manifest.mf
javadoc.html5=false
javac.test.processorpath=`${javac.test.classpath}
meta.inf.dir=`${src.dir}/META-INF
run.test.classpath=`${build.classes.dir}\:`${build.test.classes.dir}
dist.jlink.output=`${dist.jlink.dir}/$projectName
annotation.processing.run.all.processors=true
javac.modulepath=
jlink.additionalparam=
debug.classpath=`${run.classpath}"
}

function projectXml() {
    param(
        [string]
        $projectName
    )
    Set-Content -Path "$nbproject/project.xml" -Value "<?xml version=""1.0"" encoding=""UTF-8""?><project xmlns=""http://www.netbeans.org/ns/project/1"">
    <type>org.netbeans.modules.java.j2seproject</type>
    <configuration>
        <data xmlns=""http://www.netbeans.org/ns/j2se-project/3"">
            <name>$projectName</name>
            <source-roots>
                <root id=""src.src.dir"" name=""src""/>
            </source-roots>
            <test-roots/>
        </data>
        <libraries xmlns=""http://www.netbeans.org/ns/ant-project-libraries/1"">
            <definitions>./lib/nblibraries.properties</definitions>
        </libraries>
    </configuration>
</project>"
}

function checkArguments() {
    param(
        [string]
        $projectName,
        [string]
        $mainClass
    )
    # Check if valid arguments provided
    if ($null -eq $projectName) {
        Write-Host "Error: Project name not provided." -ForegroundColor Red
        exit 1
    }
    elseif ($null -eq $mainClass) {
        Write-Host "Error: Main class not provided." -ForegroundColor Red
        exit 1
    }
    if (-not($mainClass.EndsWith(".java"))) {
        $mainClass += ".java"
    }

    # Test if project and the main class exist
    Write-Host "Checking your project..."
    $projectPath = ($pwd.Path) + "/$projectName"
    $classPath = $projectPath + "/src/$mainClass"
    if (-not(Test-Path -Path $projectPath)) {
        Write-Host "Error: Project [$projectName] not found." -ForegroundColor Red
        return 
    }
    if (-not(Test-Path -Path $classPath)) {
        Write-Host "Error: Main class [$mainClass] not found." -ForegroundColor Red
        return
    }
    nbprojectSetup
}

function nbprojectSetup() {
    # Create Netbeans folder and files
    $nbproject = "$projectPath/nbproject"
    Write-Host "Creating nbproject configuration..."
    if (Test-Path -Path "$nbproject") {
        rm -r "$nbproject"    
    }
    mkdir "$nbproject"
    if (-not(Test-Path -Path "$projectPath/lib")) {
        mkdir "$projectPath/lib"
    }
    Write-Host "Creating nblibraries.properties"
    Set-Content -Path "$projectPath/lib/nblibraries.properties" -Value "#Generated by Javavscode v0.1-beta"
    Write-Host "Creating genfiles.properties..."
    Set-Content -Path "$nbproject/genfiles.properties" -Value $genfilesProperties
    Write-Host "Creating project.properties..."
    $mainClassWithoutExtension = $mainClass.Split(".")[0]
    projectPorperties $projectName
    Add-Content -Path "$nbproject/project.properties" -Value "main.class=$mainClassWithoutExtension"
    Write-Host "Creating project.xml..."
    projectXml "$projectName"
    Write-Host "Creating manifest"
    Set-Content -Path "$projectPath/manifest.mf" -Value "Manifest-Version: 1.0"
}

function export() {
    param(
        [string[]]
        $projectName,
        $mainClass
    )
    if ($projectName -eq "--version" -Or $projectName -eq "-v") {
        Write-Host "Javscode v0.1-beta [Ssaylem Edition]" -ForegroundColor Green
        Write-Host ""
        return
    }
    Write-Host "Javscode exporter" -BackgroundColor Blue -ForegroundColor Black
    Write-Host "" -BackgroundColor Black
    $projectPath = checkArguments $projectName $mainClass
}
